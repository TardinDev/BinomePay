#!/bin/bash

# üöÄ Script de d√©ploiement BinomePay sur Play Store
# Usage: ./scripts/deploy.sh [preview|production]

set -e  # Arr√™ter en cas d'erreur

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fonction pour les messages color√©s
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rifier les arguments
PROFILE=${1:-preview}
if [[ "$PROFILE" != "preview" && "$PROFILE" != "production" ]]; then
    log_error "Usage: $0 [preview|production]"
    exit 1
fi

log_info "üöÄ D√©but du d√©ploiement BinomePay - Profile: $PROFILE"

# V√©rifier que nous sommes dans le bon r√©pertoire
if [[ ! -f "app.config.ts" || ! -f "package.json" ]]; then
    log_error "Ce script doit √™tre ex√©cut√© depuis la racine du projet BinomePay"
    exit 1
fi

# V√©rifier les pr√©requis
log_info "üîç V√©rification des pr√©requis..."

# V√©rifier Node.js
if ! command -v node &> /dev/null; then
    log_error "Node.js n'est pas install√©"
    exit 1
fi

# V√©rifier EAS CLI
if ! command -v eas &> /dev/null; then
    log_error "EAS CLI n'est pas install√©. Installez avec: npm install -g eas-cli"
    exit 1
fi

log_success "Pr√©requis OK"

# V√©rifier la connexion EAS
log_info "üîê V√©rification de la connexion EAS..."
if ! eas whoami &> /dev/null; then
    log_error "Vous n'√™tes pas connect√© √† EAS. Connectez-vous avec: eas login"
    exit 1
fi

EAS_USER=$(eas whoami)
log_success "Connect√© √† EAS en tant que: $EAS_USER"

# Installer les d√©pendances
log_info "üì¶ Installation des d√©pendances..."
npm ci
log_success "D√©pendances install√©es"

# V√©rification TypeScript
log_info "üîç V√©rification TypeScript..."
if ! npm run type-check; then
    log_error "Erreurs TypeScript d√©tect√©es. Corrigez-les avant de d√©ployer."
    exit 1
fi
log_success "TypeScript OK"

# Nettoyer les builds pr√©c√©dents
log_info "üßπ Nettoyage des builds pr√©c√©dents..."
rm -rf .expo
log_success "Nettoyage termin√©"

# V√©rifier la version
CURRENT_VERSION=$(grep '"version":' package.json | cut -d'"' -f4)
log_info "üì¶ Version actuelle: $CURRENT_VERSION"

if [[ "$PROFILE" == "production" ]]; then
    # V√©rifications suppl√©mentaires pour la production
    log_info "üîç V√©rifications production..."
    
    # V√©rifier que nous ne sommes pas en mode mock
    if grep -q "EXPO_PUBLIC_MOCK_API.*true" .env 2>/dev/null; then
        log_warning "Le fichier .env contient MOCK_API=true. Assurez-vous que la production utilisera de vraies donn√©es."
    fi
    
    # V√©rifier les assets
    if [[ ! -f "assets/icon.png" ]]; then
        log_error "Ic√¥ne manquante: assets/icon.png"
        exit 1
    fi
    
    if [[ ! -f "assets/adaptive-icon.png" ]]; then
        log_error "Ic√¥ne adaptative manquante: assets/adaptive-icon.png"
        exit 1
    fi
    
    log_success "V√©rifications production OK"
    
    # Demander confirmation pour la production
    echo
    log_warning "‚ö†Ô∏è  D√âPLOIEMENT EN PRODUCTION ‚ö†Ô∏è"
    log_warning "Ceci va cr√©er une version qui sera soumise au Play Store"
    echo
    read -p "√ätes-vous s√ªr de vouloir continuer? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log_info "D√©ploiement annul√©"
        exit 0
    fi
fi

# Build EAS
log_info "üèóÔ∏è  D√©but du build EAS ($PROFILE)..."
echo
eas build --platform android --profile "$PROFILE" --non-interactive

if [[ $? -eq 0 ]]; then
    log_success "Build EAS r√©ussi!"
else
    log_error "√âchec du build EAS"
    exit 1
fi

# Pour la production, proposer la soumission automatique
if [[ "$PROFILE" == "production" ]]; then
    echo
    log_info "üöÄ Le build de production est termin√©!"
    echo
    read -p "Voulez-vous soumettre automatiquement au Play Store? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        log_info "üì§ Soumission au Play Store..."
        
        if eas submit --platform android --latest --non-interactive; then
            log_success "Application soumise au Play Store avec succ√®s!"
            log_info "üì± L'application sera disponible apr√®s validation (1-3 jours)"
        else
            log_error "√âchec de la soumission au Play Store"
            log_info "Vous pouvez r√©essayer avec: eas submit --platform android --latest"
        fi
    else
        log_info "üìÅ Vous pouvez soumettre manuellement plus tard avec:"
        log_info "   eas submit --platform android --latest"
    fi
else
    # Pour preview, donner les instructions de test
    log_success "Build preview termin√©!"
    log_info "üì± Pour t√©l√©charger et tester l'APK:"
    log_info "   1. Allez sur https://expo.dev/accounts/$(eas whoami)/projects/binomepay/builds"
    log_info "   2. T√©l√©chargez le dernier build"
    log_info "   3. Installez sur votre appareil Android"
fi

echo
log_success "üéâ D√©ploiement termin√© avec succ√®s!"

# Afficher les prochaines √©tapes
echo
log_info "üìã Prochaines √©tapes:"
if [[ "$PROFILE" == "production" ]]; then
    log_info "   1. V√©rifier le statut dans Google Play Console"
    log_info "   2. Pr√©parer les assets marketing (screenshots, descriptions)"
    log_info "   3. Attendre la validation Google (1-3 jours)"
    log_info "   4. Surveiller les m√©triques post-lancement"
else
    log_info "   1. Tester l'APK sur plusieurs appareils"
    log_info "   2. V√©rifier les fonctionnalit√©s critiques"
    log_info "   3. Si tout est OK, d√©ployer en production avec:"
    log_info "      ./scripts/deploy.sh production"
fi

echo
log_info "üìû Support: developer@binomepay.com"
log_info "üìñ Documentation: ./DEPLOYMENT_GUIDE.md"